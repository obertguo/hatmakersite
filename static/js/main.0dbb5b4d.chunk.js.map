{"version":3,"sources":["components/Button.tsx","App.tsx","index.js"],"names":["Pixel","props","selectedColor","useState","color","setColor","className","onClick","e","preventDefault","style","background","App","setSelectedColor","src","width","display","type","onChange","target","value","key","pixels","row","pixelRow","col","push","createPixels","accept","reader","FileReader","onload","a","res","result","split","Array","from","document","getElementsByClassName","idx","length","files","readAsText","forEach","pixel","rgb","backgroundColor","r","match","join","g","b","link","createElement","setAttribute","encodeURIComponent","body","appendChild","click","removeChild","ReactDOM","render","StrictMode","getElementById"],"mappings":"+OAkBeA,EAhBD,SAACC,GACX,IAAMC,EAAgBD,EAAMC,cAE5B,EAAwBC,mBAAiB,WAAzC,mBAAKC,EAAL,KAAYC,EAAZ,KAOA,OACI,wBAAQC,UAAU,QAAQC,QANhB,SAACC,GACXA,EAAEC,iBACFJ,EAASH,IAIiCQ,MAAO,CAACC,WAAYP,MCkGvDQ,EAxGH,WACV,MAAwCT,mBAAiB,WAAzD,mBAAKD,EAAL,KAAoBW,EAApB,KAoFA,OACE,sBAAKP,UAAU,UAAf,UACE,qBAAKQ,IAAI,YAAYC,MAAM,OAC3B,oBAAIL,MAAO,CAACM,QAAS,gBAArB,sBAEA,+HACA,uBAAOC,KAAK,QAAQC,SAxFD,SAACV,GACtBA,EAAEC,iBACFI,EAAiBL,EAAEW,OAAOC,UAuFxB,qBAAIV,MAAO,CAACM,QAAS,UAArB,4BAAgDd,KAChD,uBACA,uBAtFiB,WAInB,IAHA,IAAImB,EAAM,EACNC,EAAS,GAELC,EAAM,EAAGA,EAfL,IAesBA,EAAI,CAEpC,IADA,IAAIC,EAAW,GACPC,EAAM,EAAGA,EAhBP,KAgBwBA,IAC9BJ,EACFG,EAASE,KAAK,cAAC,EAAD,CAAiBxB,cAAeA,GAApBmB,MAG1BA,EACFG,EAASE,KAAK,sBAASL,IACvBC,EAAOI,KAAKF,GAEd,OAAOF,EAwEJK,GACD,uBAVF,kBAWiB,uBAAOV,KAAK,OAAOW,OAAO,OAAOV,SAvC9B,SAACV,GACrBA,EAAEC,iBACF,IAAMoB,EAAS,IAAIC,WAGnBD,EAAOE,OAAP,uCAAgB,WAAMvB,GAAN,qBAAAwB,EAAA,sDAQd,IANMC,GAAM,UAACzB,EAAEW,cAAH,aAAC,EAAUe,QAAkBC,MAAM,MAEzCb,EAASc,MAAMC,KAAKC,SAASC,uBAAuB,UAGtDC,EAAM,EACJA,EAAMlB,EAAOmB,QAAUD,EAAMP,EAAIQ,QACpCnB,EAAOkB,GAA2B9B,MAAMC,WAAzC,cAA6DsB,EAAIO,GAAjE,OACEA,EAVU,2CAAhB,sDAeGhC,EAAEW,OAAOuB,OACVb,EAAOc,WAAWnC,EAAEW,OAAOuB,MAAM,IAGnClC,EAAEW,OAAOC,MAAQ,MAiBf,wBAAQb,QAzEK,SAACC,GAChBA,EAAEC,iBAEF,IAAIyB,EAAS,GAOEE,MAAMC,KAAKC,SAASC,uBAAuB,UACnDK,SAAQ,SAAAC,GAAS,IAAD,MACfC,EAAOD,EAA4BnC,MAAMqC,gBAAgBZ,MAAM,KAC/Da,EAAC,UAAGF,EAAI,GAAGG,MAAM,cAAhB,aAAG,EAAqBC,KAAK,IAC9BC,EAAC,UAAGL,EAAI,GAAGG,MAAM,cAAhB,aAAG,EAAqBC,KAAK,IAC9BE,EAAC,UAAGN,EAAI,GAAGG,MAAM,cAAhB,aAAG,EAAqBC,KAAK,IACpChB,GAAM,UAAOc,EAAP,YAAYG,EAAZ,YAAiBC,EAAjB,SAIR,IAAIC,EAAOf,SAASgB,cAAc,KAClCD,EAAKE,aAAa,OAAQ,iCAAmCC,mBAAmBtB,IAChFmB,EAAKE,aAAa,WAAY,eAE9BF,EAAK3C,MAAMM,QAAU,OACrBsB,SAASmB,KAAKC,YAAYL,GAE1BA,EAAKM,QAELrB,SAASmB,KAAKG,YAAYP,IA4CxB,kCCrGNQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzB,SAAS0B,eAAe,W","file":"static/js/main.0dbb5b4d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst Pixel = (props: any) =>{\n    const selectedColor = props.selectedColor;\n\n    let [color, setColor] = useState<string>('#ffffff');\n\n    const click = (e: React.MouseEvent) =>{\n        e.preventDefault();\n        setColor(selectedColor);\n    }\n\n    return(\n        <button className=\"pixel\" onClick={click} style={{background: color}}></button>\n    )\n    \n}\n\nexport default Pixel;","import './App.css';\nimport Pixel from './components/Button';\nimport React, {useState } from 'react';\n\nconst rowSize = 8;\nconst colSize = 64;\n\nconst App = () =>{\n  let [selectedColor, setSelectedColor] = useState<string>('#000000');\n  \n  const onColorChanged = (e: React.ChangeEvent<HTMLInputElement>) =>{\n    e.preventDefault();\n    setSelectedColor(e.target.value);\n  }\n\n  const createPixels = () =>{\n    let key = 0;\n    let pixels = [];\n\n    for(let row = 0; row < rowSize; ++row){\n      let pixelRow = [];\n      for(let col = 0; col < colSize; ++col){\n        ++key;\n        pixelRow.push(<Pixel key={key} selectedColor={selectedColor}/>);\n      }\n\n      ++key;\n      pixelRow.push(<br key={key}/>);\n      pixels.push(pixelRow);\n    }\n    return pixels;\n  }\n\n  const download = (e: React.MouseEvent) =>{\n    e.preventDefault();\n\n    let result = '';\n\n    //Read each pixel data, and get their rgb values, and append to file. The file format is this: \n    //r,g,b\n    //r,g,b,\n    //r,g,b,\n    //and so on...\n    const pixels = Array.from(document.getElementsByClassName('pixel'));\n    pixels.forEach(pixel =>{\n      const rgb = (pixel as HTMLButtonElement).style.backgroundColor.split(',');\n      const r = rgb[0].match(/\\d/g)?.join('');\n      const g = rgb[1].match(/\\d/g)?.join('');\n      const b = rgb[2].match(/\\d/g)?.join('');\n      result += `${r},${g},${b}\\n`\n    });\n    \n    //Hacky way to download text file from front end using js, but still works\n    let link = document.createElement('a');\n    link.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(result));\n    link.setAttribute('download', 'pattern.hat');\n\n    link.style.display = 'none';\n    document.body.appendChild(link);\n\n    link.click();\n\n    document.body.removeChild(link);\n  }\n\n  const uploadPattern = (e: React.ChangeEvent<HTMLInputElement>) =>{\n    e.preventDefault();\n    const reader = new FileReader();\n\n    //Once read operation is finished, the text is stored in e.target.result\n    reader.onload = async(e) =>{\n      //Convert to array of [\"r,g,b\", \"r,g,b\", \"r,g,b\"]\n      const res = (e.target?.result as string).split('\\n');\n\n      const pixels = Array.from(document.getElementsByClassName('pixel'));\n\n      //assuming the pattern is valid, try iterating through each pattern and pixel until idx is no longer valid for either list\n      let idx = 0;\n      while(idx < pixels.length && idx < res.length){\n        (pixels[idx] as HTMLButtonElement).style.background = `rgb(${res[idx]})`;\n        ++idx;\n      }\n    }\n\n    //Let the reader read the text file. Once finished, the result is stored in e.target.result\n    if(e.target.files){\n      reader.readAsText(e.target.files[0]!);\n    }\n\n    e.target.value = \"\"; //Reset path so the user can upload the same file again if they want\n  }\n\n  return(\n    <div className=\"wrapper\">\n      <img src=\"/logo.png\" width=\"50\"/>\n      <h1 style={{display: 'inline-block'}}>HatMaker</h1> \n      \n      <p>Design hat patterns. The site is designed to work better on large screen devices/desktop mode.</p>\n      <input type=\"color\" onChange={onColorChanged}/>\n      <h2 style={{display: 'inline'}}>Selected Color {selectedColor}</h2>\n      <br/>\n      <br/>\n      {createPixels()}\n      <br/>\n      Upload Pattern <input type=\"file\" accept=\".hat\" onChange={uploadPattern}/>\n\n      <button onClick={download}>Download Pattern</button>\n    </div>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}